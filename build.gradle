import java.util.stream.Collectors

buildscript {
    dependencies {
        classpath group: 'org.sonarsource.scanner.gradle', name: 'sonarqube-gradle-plugin', version: '2.6.2'
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.0.30")
    }
}

plugins {
    id 'application'
    id 'pmd'
    id 'org.springframework.boot' version '2.0.8.RELEASE'
    id 'org.owasp.dependencycheck' version '4.0.2'
    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'com.gorylenko.gradle-git-properties' version '1.5.2'
    id 'info.solidsoft.pitest' version '1.3.0'
}

apply plugin: 'org.sonarqube'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'net.serenity-bdd.aggregator'

apply from: 'liquibase.gradle'

gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/src/main/resources/uk/gov/hmcts/probate/services/persistence")
    keys = ['git.commit.id','git.commit.time']
    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    dateFormatTimeZone = "GMT"
}

group = 'uk.gov.hmcts.probate'
version = "4.1.0"
mainClassName = 'uk.gov.hmcts.probate.services.persistence.Application'

sourceCompatibility = 1.8
targetCompatibility = 1.8

check.dependsOn dependencyCheckAnalyze

jacoco {
    toolVersion = '0.8.0'
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled false
        html.destination "${buildDir}/reports/jacoco"
    }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

findbugs{
    ignoreFailures=true
    reportLevel = "low"
}

sonarqube {
    properties {
        property "sonar.projectName", "Probate :: Persistence Service"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
        property "sonar.host.url", "https://sonar.reform.hmcts.net/"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    }
}

test.finalizedBy jacocoTestReport

dependencyCheck {
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/suppressions.xml'
    scanConfigurations = ['compile']
    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
}

sourceSets {
    testSmoke {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }
    testFunctional {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/functionalTest/resources')
    }
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.testSmoke.output.classesDirs
  classpath = sourceSets.testSmoke.runtimeClasspath
}

task functional(type: Test) {
    description = "Runs functional Tests"
    testClassesDirs = sourceSets.testFunctional.output.classesDirs
    classpath = sourceSets.testFunctional.runtimeClasspath
    finalizedBy aggregate
}

pmd {
  toolVersion = "6.3.0"
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.testFunctional, sourceSets.testSmoke]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
    executionData(test)
    reports {
        xml.enabled = true
        csv.enabled = false
        xml.destination = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
    
}

pitest {
    targetClasses = ['uk.gov.hmcts.probate.*']
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 30
}

repositories {
    mavenLocal()
    maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
    maven { url 'https://repo.spring.io/libs-milestone' }
}


processResources {
    from ('src/lib/AI-Agent.xml') {
        into 'lib'
    }
}

def versions = [
        reformsJavaLoggingVersion: '3.0.4',
        springBootVersion: '2.0.8.RELEASE',
        serenityVersion: '2.0.30',
]

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBootVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-rest', version: versions.springBootVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: versions.springBootVersion

    compile ('org.postgresql:postgresql:42.2.2') {
        exclude module: 'slf4j-simple'
    }

    compile group: 'org.liquibase', name: 'liquibase-core', version: '3.6.2'

    compile group: 'uk.gov.hmcts.reform', name: 'java-logging', version: versions.reformsJavaLoggingVersion
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-appinsights', version: versions.reformsJavaLoggingVersion
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-httpcomponents', version: versions.reformsJavaLoggingVersion
    compile group: 'org.springframework.hateoas', name: 'spring-hateoas'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.8'

    testCompile group: 'org.pitest', name: 'pitest', version: '1.3.2'
    testCompile 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.3.0'
    testCompile 'org.codehaus.sonar-plugins:sonar-pitest-plugin:0.5'

    testCompile group: 'com.google.code.findbugs', name: 'findbugs', version: '3.0.1'

    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBootVersion
    testCompile group: 'org.springframework.boot', name: 'spring-boot-autoconfigure', version: versions.springBootVersion

    testCompile group: 'com.h2database', name: 'h2', version: '1.4.197'
    testCompile group: 'io.rest-assured', name: 'rest-assured', version: '3.0.7'

    testFunctionalCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBootVersion
    testFunctionalCompile group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenityVersion
    testFunctionalCompile group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenityVersion
    testFunctionalCompile group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenityVersion
    testFunctionalCompile group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenityVersion
    testFunctionalCompile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    testFunctionalCompile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
    testFunctionalCompile sourceSets.main.runtimeClasspath

    testSmokeCompile sourceSets.main.runtimeClasspath
    testSmokeCompile sourceSets.test.runtimeClasspath
}

compileJava {
    options.compilerArgs << '-parameters'
}

bootJar {
    archiveName = 'persistence-service.jar'
    manifest {

        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
}

task printVersion {
    doLast {
        print project.version
    }
}

run {
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
    }
}
